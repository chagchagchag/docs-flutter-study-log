{"/":{"title":"Introduction","data":{"":"Flutter Study Log!!! 하하하"}},"/step1-basic/0.setup":{"title":"0.setup","data":{"설치--세팅#설치 & 세팅":"","fluter-android-studio-설치#Fluter, Android Studio 설치":"참고로 Android Studio 는 별도의 라이선스 없이 누구나 사용가능합니다.","flutter-설치#Flutter 설치":"Flutter 다운로드 링크는 아래와 같습니다.\nhttps://flutter-ko.dev/get-started/install\n최신 버전은 3.22 버전이며 3.22 버전으로 다운로드 받아지는데, 여러 버전들을 보관한 저장소는 아래와 같습니다.\nFlutter SDK Archive\n다운로드 받은 SDK 를 OS의 환경변수로 등록해주세요.이때 주의할 점은 압축을 푼 디렉터리내에서 bin 디렉터리를 환경변수로 등록해야 한다는 점입니다.","android-studio-설치#Android Studio 설치":"구글에서 Android Studio Download 를 검색합니다. 다운로드 링크는 여기입니다. 다운로드 받은 후 Android Studio 를 설치해줍니다.","샘플-프로젝트-clone--download#샘플 프로젝트 Clone / Download":"샘플 프로젝트는 준비해서 따로 올릴 예정입니다.","android-studio--plugins--dart--flutter-설치#Android Studio → Plugins → Dart , Flutter 설치":"Dart 설치\nFlutter 설치","의존성-다운로드#의존성 다운로드":"Flutter 의 경우 flutter pub get 명령어로 의존성을 다운로드 받아줘야 합니다. 그런데 Android Studio 내에서는 flutter pub get 명령이 이미 구비되어 있으며 GUI에서 버튼을 누르는 것으로 update 가 가능해집니다.위의 pubspec.yaml 파일에서 Pub get 버튼을 클릭해서 나머지 의존성들을 모두 다운로드 받아서 설치해주시면 됩니다."}},"/step1-basic/1.hello":{"title":"1.hello","data":{"helloworld-프로젝트#Helloworld 프로젝트":"","project-개설#Project 개설":"","project-view-로-전환#Project View 로 전환":"","start#Start":"lib/main.dart 와 test/widget_test.dart 파일을 모두 열어서 파일 내부의 내용들을 모두 지워줍니다. lib/main.dart , test/widget_test.dart 파일들은 모두 아래의 위치에 있습니다.\nlib/main.dart 와 test/widget_test.dart 파일의 내부를 모두 지워주세요.\n이번에는 아래의 코드를 작성합니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n\r\n    ),\r\n  ));\r\n}\nrunApp() 함수\nrunApp 함수 내에 MaterialApp 말고도 Cupertino 등 여러가지를 사용할 수 있습니다.\nMaterialApp\n앱의 가장 기본이 되는 단위. 최상위에 위치\n이번 예제에서는 material.dart 내의 runApp() 함수를 사용하기에 MaterialApp 객체를 사용합니다.\nScaffold\nMaterialApp 에서 화면을 구성할 때 가장 기본이 되는 도화지같은 개념입니다.\nrunApp() 함수는 MaterialApp 객체를 입력으로 받는 함수를 선택하시기 바랍니다.\n이제 위의 코드를 구동시키면 아래와 같은 화면이 나타납니다. 이번 예제에서는 별도의 Device Manager 를 선택하지 않았기 때문에 웹에서 그 내용이 나타납니다.\n디버그 모드에서 띄웠기에 Debug 라는 표시가 나타납니다.이번에는 아래와 같이 body: Text(...) 을 추가해줍니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: Text('Hello, Flutter', style: TextStyle(\r\n        color: Colors.blue,\r\n      ),),\r\n    ),\r\n  ));\r\n}\n위의 코드에서 Ctrl + Alt + L 또는 Cmd + Alt + L 을 누르면 아래와 같이 들여쓰기가 됩니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: Text(\r\n        'Hello, Flutter',\r\n        style: TextStyle(\r\n          color: Colors.blue,\r\n        ),\r\n      ),\r\n    ),\r\n  ));\r\n}\n별도로 Run 버튼을 새로 누르지 않더라도 새로고침이 되며, 출력결과는 아래와 같습니다.\n이번에는 위젯을 추가해봅니다. 방금전 추가했던 Text 컴포넌트 위에 Alt + Enter 키를 누르면 여러가지 선택지가 나타나는데 이 중에서 Wrap with widget ... 을 선택해줍니다.\n그리고 SafeArea 를 선택해줍니다.\n완성된 코드는 아래와 같습니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: SafeArea(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    ),\r\n  ));\r\n}","코드-분리#코드 분리":"이번에는 코드를 분리해봅니다. 에디터 하단의 공백에 stless 를 입력하면 Stateless Widget 의 기본 코드가 Live Template 을 통해서 나타납니다.\n그리고 만들어진 Stateless Widget 에는 build 함수 내에 방금전 작성했던 SafeArea 코드를 리턴하도록 작성해줍니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: SafeArea(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Text(\r\n        'Hello, Flutter',\r\n        style: TextStyle(\r\n          color: Colors.blue,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\n그리고 HelloworldWidget 을 main() 에서 사용하도록 아래와 같이 수정해줍니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      /// (1) : 이 부분을 수정해줬습니다.\r\n      body: HelloworldWidget(),\r\n    ),\r\n  ));\r\n}\r\n\r\n// (2)\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Text(\r\n        'Hello, Flutter',\r\n        style: TextStyle(\r\n          color: Colors.blue,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\n(1) : 원래 있던 코드 들을 (2) 에서 작성한 클래스 내의 build() 메서드 안으로 옮겨주었고, (2) 에서 작성한 위젯을 불러오도록 작성했습니다.","text-위젯을-center-위젯으로-한번-더-감싸기#Text 위젯을 Center 위젯으로 한번 더 감싸기":"Text 의 위치를 정 중앙에 위치하도록 해봅니다.위에서 작성한 HelloworldWidget 에 Alt + Enter 키를 누르면 추천이 나타나는데 그 중 Wrap With Center 를 선택해줍니다.\n그러면 코드가 아래와 같이 잘 적용됩니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: HelloworldWidget(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Center(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\n변경된 화면은 아래와 같습니다."}}}