{"/":{"title":"Introduction","data":{"":"Flutter Study Log!!! 하하하"}},"/step1-basic/0.avd-manager":{"title":"0.avd Manager","data":{"":"Android 상단의 Device Manager 버튼 클릭\n또는 아래와 같이 우측의 Device Manager 탭 클릭\n그리고 + 버튼 클릭 후 Create Virtual Device 버튼을 클릭합니다.Device 를 선택합니다. 제 경우에는 컴퓨터의 발열이 올라가는걸 좋아하지 않아서 가급적 size도 작고 해상도도 낮은 기기를 선택했습니다.\n원하는 Release 를 선택 후에 다운로드 버튼을 눌러서 다운로드를 완료한 후 Next 버튼을 클릭해주세요다운로드 버튼은 아래와 같은 버튼입니다.\nAVD Name 은 Simple Phone 이라고 입력해줬습니다. Finish 를 눌러서 AVD 생성을 마무리합니다.\n실행시킬 main.dart 코드는 아래와 같습니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n          actions: [\r\n            IconButton(\r\n                onPressed: () {\r\n                  print(\"Pressed!!\");\r\n                },\r\n                icon: Icon(Icons.play_arrow))\r\n          ],\r\n          title: Center(\r\n            child: Text('Helloworld App Bar'),\r\n          )),\r\n      body: HelloworldWidget(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Center(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\nDevice 를 실행시킵니다.\nmain.dart 파일 역시 실행시켜줍니다. 이때 Device 는 방금 생성한 Simple Phone 을 선택해서 실행합니다.\n실행화면이 나타나는데 조금 더 큰 화면에서 보고 싶다면 아래에 빨간 테두리로 표시한 버튼을 클릭해주세요.\n새로운 윈도우에 조금 더 큰 화면으로 앱이 나타났습니다. 빨간색 테두리로 표시한 부분에 위치한 재생 버튼을 클릭해주세요.\n아래와 같이 Pressed!! 라는 문구가 콘솔에 잘 나타난다면 정상입니다."}},"/step1-basic/0.setup":{"title":"0.setup","data":{"설치--세팅#설치 & 세팅":"","fluter-android-studio-설치#Fluter, Android Studio 설치":"참고로 Android Studio 는 별도의 라이선스 없이 누구나 사용가능합니다.","flutter-설치#Flutter 설치":"Flutter 다운로드 링크는 아래와 같습니다.\nhttps://flutter-ko.dev/get-started/install\n최신 버전은 3.22 버전이며 3.22 버전으로 다운로드 받아지는데, 여러 버전들을 보관한 저장소는 아래와 같습니다.\nFlutter SDK Archive\n다운로드 받은 SDK 를 OS의 환경변수로 등록해주세요.이때 주의할 점은 압축을 푼 디렉터리내에서 bin 디렉터리를 환경변수로 등록해야 한다는 점입니다.","android-studio-설치#Android Studio 설치":"구글에서 Android Studio Download 를 검색합니다. 다운로드 링크는 여기입니다. 다운로드 받은 후 Android Studio 를 설치해줍니다.","샘플-프로젝트-clone--download#샘플 프로젝트 Clone / Download":"샘플 프로젝트는 준비해서 따로 올릴 예정입니다.","android-studio--plugins--dart--flutter-설치#Android Studio → Plugins → Dart , Flutter 설치":"Dart 설치\nFlutter 설치","의존성-다운로드#의존성 다운로드":"Flutter 의 경우 flutter pub get 명령어로 의존성을 다운로드 받아줘야 합니다. 그런데 Android Studio 내에서는 flutter pub get 명령이 이미 구비되어 있으며 GUI에서 버튼을 누르는 것으로 update 가 가능해집니다.위의 pubspec.yaml 파일에서 Pub get 버튼을 클릭해서 나머지 의존성들을 모두 다운로드 받아서 설치해주시면 됩니다."}},"/step1-basic/3.widgets":{"title":"3.widgets","data":{"":"MatiralApp, Scaffold widget\nContainer, Center widget","materialapp-widget#MaterialApp Widget":"참고 : api.flutter.dev - MaterialApp class\napi.flutter.dev - MaterialApp class 에서는 MaterialApp 내의 인자값에 대해서 아래와 같이 설명하고 있습니다.The MaterialApp configures the top-level Navigator to search for routes in the following order:\nFor the / route, the home property, if non-null, is used.\nOtherwise, the routes table is used, if it has an entry for the route.\nOtherwise, onGenerateRoute is called, if provided. It should return a non-null value for any valid route not handled by home and routes.\nFinally if all else fails onUnknownRoute is called.\n이 외에도 Properties 섹션을 보면 다양한 인자값에 대해 설명하고 있습니다.home\n앱을 제일 처음 실행했을 때 진입하는 기본 route 를 home 이라고 이야기합니다.\nroutes\n앱 내에서 화면이 이동될 때 이동될 경로를 route 라고 이야기합니다.\ncolor, theme\ncolor 또는 theme 을 지정해줄 수 있습니다.\n일반적으로 theme 객체를 지정해서 통일성을 부여합니다.","scaffold-widget#Scaffold Widget":"Scaffold 는 앱을 구성할 때 쓰이는 도화지(캔버스) 같은 존재입니다. e.g.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(title: Center(child: Text('Helloworld App Bar'),)),\r\n      body: HelloworldWidget(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Center(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\nScaffold 내에 appBar, body 를 추가해줬습니다.위의 실행 결과는 아래와 같습니다.Scaffold 위젯은 위의 그림에서 빨간 테두리에 표시한 영역에 해당합니다. 마치 캔버스 같은 영역입니다.e.g. 2\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n          actions: [\r\n            IconButton(\r\n                onPressed: () {\r\n                  print(\"Pressed!!\");\r\n                },\r\n                icon: Icon(Icons.play_arrow))\r\n          ],\r\n          title: Center(\r\n            child: Text('Helloworld App Bar'),\r\n          )),\r\n      body: HelloworldWidget(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Center(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}","container-widget#Container Widget":"","center-widget#Center Widget":""}},"/step1-basic/1.hello":{"title":"1.hello","data":{"helloworld-프로젝트#Helloworld 프로젝트":"","project-개설#Project 개설":"","project-view-로-전환#Project View 로 전환":"","start#Start":"lib/main.dart 와 test/widget_test.dart 파일을 모두 열어서 파일 내부의 내용들을 모두 지워줍니다. lib/main.dart , test/widget_test.dart 파일들은 모두 아래의 위치에 있습니다.\nlib/main.dart 와 test/widget_test.dart 파일의 내부를 모두 지워주세요.\n이번에는 아래의 코드를 작성합니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n\r\n    ),\r\n  ));\r\n}\nrunApp() 함수\nrunApp 함수 내에 MaterialApp 말고도 Cupertino 등 여러가지를 사용할 수 있습니다.\nMaterialApp\n앱의 가장 기본이 되는 단위. 최상위에 위치\n이번 예제에서는 material.dart 내의 runApp() 함수를 사용하기에 MaterialApp 객체를 사용합니다.\nScaffold\nMaterialApp 에서 화면을 구성할 때 가장 기본이 되는 도화지같은 개념입니다.\nrunApp() 함수는 MaterialApp 객체를 입력으로 받는 함수를 선택하시기 바랍니다.\n이제 위의 코드를 구동시키면 아래와 같은 화면이 나타납니다. 이번 예제에서는 별도의 Device Manager 를 선택하지 않았기 때문에 웹에서 그 내용이 나타납니다.\n디버그 모드에서 띄웠기에 Debug 라는 표시가 나타납니다.이번에는 아래와 같이 body: Text(...) 을 추가해줍니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: Text('Hello, Flutter', style: TextStyle(\r\n        color: Colors.blue,\r\n      ),),\r\n    ),\r\n  ));\r\n}\n위의 코드에서 Ctrl + Alt + L 또는 Cmd + Alt + L 을 누르면 아래와 같이 들여쓰기가 됩니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: Text(\r\n        'Hello, Flutter',\r\n        style: TextStyle(\r\n          color: Colors.blue,\r\n        ),\r\n      ),\r\n    ),\r\n  ));\r\n}\n별도로 Run 버튼을 새로 누르지 않더라도 새로고침이 되며, 출력결과는 아래와 같습니다.\n이번에는 위젯을 추가해봅니다. 방금전 추가했던 Text 컴포넌트 위에 Alt + Enter 키를 누르면 여러가지 선택지가 나타나는데 이 중에서 Wrap with widget ... 을 선택해줍니다.\n그리고 SafeArea 를 선택해줍니다.\n완성된 코드는 아래와 같습니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: SafeArea(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    ),\r\n  ));\r\n}","코드-분리#코드 분리":"이번에는 코드를 분리해봅니다. 에디터 하단의 공백에 stless 를 입력하면 Stateless Widget 의 기본 코드가 Live Template 을 통해서 나타납니다.\n그리고 만들어진 Stateless Widget 에는 build 함수 내에 방금전 작성했던 SafeArea 코드를 리턴하도록 작성해줍니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: SafeArea(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Text(\r\n        'Hello, Flutter',\r\n        style: TextStyle(\r\n          color: Colors.blue,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\n그리고 HelloworldWidget 을 main() 에서 사용하도록 아래와 같이 수정해줍니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      /// (1) : 이 부분을 수정해줬습니다.\r\n      body: HelloworldWidget(),\r\n    ),\r\n  ));\r\n}\r\n\r\n// (2)\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Text(\r\n        'Hello, Flutter',\r\n        style: TextStyle(\r\n          color: Colors.blue,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\n(1) : 원래 있던 코드 들을 (2) 에서 작성한 클래스 내의 build() 메서드 안으로 옮겨주었고, (2) 에서 작성한 위젯을 불러오도록 작성했습니다.","text-위젯을-center-위젯으로-한번-더-감싸기#Text 위젯을 Center 위젯으로 한번 더 감싸기":"Text 의 위치를 정 중앙에 위치하도록 해봅니다.위에서 작성한 HelloworldWidget 에 Alt + Enter 키를 누르면 추천이 나타나는데 그 중 Wrap With Center 를 선택해줍니다.\n그러면 코드가 아래와 같이 잘 적용됩니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: HelloworldWidget(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Center(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\n변경된 화면은 아래와 같습니다.","hot-reload-와-hot-restart#Hot Reload 와 Hot Restart":"Hot Reload, Hot Restart 모두 앱을 Re Compile 한 후 빌드하는 것이 아닙니다. 따라서 dependency 를 추가했다거나, 라이브러리 수정, Asset 추가 등과 같은 상황에는 적용되지 않습니다. 따라서 이런 경우에는 재시작해야 합니다.\n만약 지나치게 많은 코드의 변경사항을 했을 경우 Reload → Restart 하는 순서로 실행중인 프로세스가 상위 재시동을 요청할 수도 있고, 상태관리를 하는 기능일 때에는 Hot Reload, Hot Restart 기능의 사용은 가급적 주의가 필요합니다.Hot Reload, Hot Restart 기능은 Dart 의 JIT 컴파일러를 이용해 앱의 컴파일 과정 없이 코드의 변경사항을 즉시 반영하는 기능입니다. 참고로 Dart 언어는 JIT 컴파일러를 이용해서 프로그램의 실행 중에 컴파일을 할 수도 있고, AOT 컴파일러를 이용해서 전체 코드를 컴파일 한 후에 실행할 수도 있습니다. 주로 JIT 컴파일러는 개발 중에 사용되며, AOT 컴파일러는 실재 배포될 애플리케이션을 실행하는 데에 사용됩니다.","hot-reload#Hot Reload":"Hot Reload 버튼은 위와 같은 아이콘이 적용된 버튼입니다. Hot Reload 버튼을 누르면 Ctrl + S 로 소스코드의 변경사항을 저장될 때마다 변경된 부분이 적용됩니다.앱의 상태가 유지된 상태로 코드의 변경사항을 확인하면서 빠르게 개발을 수행할 수 있습니다. 주로 UI 수정에 많이 사용합니다.","hot-restart#Hot Restart":"Hot Restart 버튼은 위와 같은 아이콘이 적용된 버튼입니다. Hot Restart 버튼을 누르면 Ctrl + S 로 소스코드의 변경사항을 저장할 때마다 Restart 됩니다. 앱의 모든 상태가 초기화되고, 앱의 코드 변경사항이 반영됩니다."}},"/step1-basic/2.design-guide":{"title":"2.design Guide","data":{"":"Material Design 은 Google 에서 제시하는 디자인 가이드라인입니다. 최근 Material 3 을 발표했으며, Flutter 에서는 Material 2, Material 3 를 개발자 취향에 맞게 선택해서 활용할 수 있습니다. Flutter 의 경우 Google 의 주도하에 개발하는 프레임워크이기에 Cupertino Widget 보다는 Material Widget 이 더 많이 존재하는 편입니다.\nGoogle : Material Design\nApple : Cupertino Design\nMaterial Design Guide\nhttps://m3.material.io/\nFlutter Docs\nhttps://docs.flutter.dev/ui\n여러명이서 개발을 하다보면 결국 위젯의 폰트 사이즈, 배치, 정렬, 색상들이 완전하게 달라지게 되어서 앱이 저렴해보일 수 있는데, Material Design Guide 와 같은 디자인 가이드를 따르게 되면, 색상, 폰트사이즈, 배치, 정렬 이런 요소들이 통일감을 가질수 있다는 장점이 있습니다,"}}}