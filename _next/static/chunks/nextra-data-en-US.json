{"/step1-basic/0.avd-manager":{"title":"0.avd Manager","data":{"":"Android 상단의 Device Manager 버튼 클릭\n또는 아래와 같이 우측의 Device Manager 탭 클릭\n그리고 + 버튼 클릭 후 Create Virtual Device 버튼을 클릭합니다.Device 를 선택합니다. 제 경우에는 컴퓨터의 발열이 올라가는걸 좋아하지 않아서 가급적 size도 작고 해상도도 낮은 기기를 선택했습니다.\n원하는 Release 를 선택 후에 다운로드 버튼을 눌러서 다운로드를 완료한 후 Next 버튼을 클릭해주세요다운로드 버튼은 아래와 같은 버튼입니다.\nAVD Name 은 Simple Phone 이라고 입력해줬습니다. Finish 를 눌러서 AVD 생성을 마무리합니다.\n실행시킬 main.dart 코드는 아래와 같습니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n          actions: [\r\n            IconButton(\r\n                onPressed: () {\r\n                  print(\"Pressed!!\");\r\n                },\r\n                icon: Icon(Icons.play_arrow))\r\n          ],\r\n          title: Center(\r\n            child: Text('Helloworld App Bar'),\r\n          )),\r\n      body: HelloworldWidget(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Center(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\nDevice 를 실행시킵니다.\nmain.dart 파일 역시 실행시켜줍니다. 이때 Device 는 방금 생성한 Simple Phone 을 선택해서 실행합니다.\n실행화면이 나타나는데 조금 더 큰 화면에서 보고 싶다면 아래에 빨간 테두리로 표시한 버튼을 클릭해주세요.\n새로운 윈도우에 조금 더 큰 화면으로 앱이 나타났습니다. 빨간색 테두리로 표시한 부분에 위치한 재생 버튼을 클릭해주세요.\n아래와 같이 Pressed!! 라는 문구가 콘솔에 잘 나타난다면 정상입니다."}},"/step1-basic/2.design-guide":{"title":"2.design Guide","data":{"":"Material Design 은 Google 에서 제시하는 디자인 가이드라인입니다. 최근 Material 3 을 발표했으며, Flutter 에서는 Material 2, Material 3 를 개발자 취향에 맞게 선택해서 활용할 수 있습니다. Flutter 의 경우 Google 의 주도하에 개발하는 프레임워크이기에 Cupertino Widget 보다는 Material Widget 이 더 많이 존재하는 편입니다.\nGoogle : Material Design\nApple : Cupertino Design\nMaterial Design Guide\nhttps://m3.material.io/\nFlutter Docs\nhttps://docs.flutter.dev/ui\n여러명이서 개발을 하다보면 결국 위젯의 폰트 사이즈, 배치, 정렬, 색상들이 완전하게 달라지게 되어서 앱이 저렴해보일 수 있는데, Material Design Guide 와 같은 디자인 가이드를 따르게 되면, 색상, 폰트사이즈, 배치, 정렬 이런 요소들이 통일감을 가질수 있다는 장점이 있습니다."}},"/step1-basic/0.setup":{"title":"0.setup","data":{"설치--세팅#설치 & 세팅":"","fluter-android-studio-설치#Fluter, Android Studio 설치":"참고로 Android Studio 는 별도의 라이선스 없이 누구나 사용가능합니다.","flutter-설치#Flutter 설치":"Flutter 다운로드 링크는 아래와 같습니다.\nhttps://flutter-ko.dev/get-started/install\n최신 버전은 3.22 버전이며 3.22 버전으로 다운로드 받아지는데, 여러 버전들을 보관한 저장소는 아래와 같습니다.\nFlutter SDK Archive\n다운로드 받은 SDK 를 OS의 환경변수로 등록해주세요.이때 주의할 점은 압축을 푼 디렉터리내에서 bin 디렉터리를 환경변수로 등록해야 한다는 점입니다.","android-studio-설치#Android Studio 설치":"구글에서 Android Studio Download 를 검색합니다. 다운로드 링크는 여기입니다. 다운로드 받은 후 Android Studio 를 설치해줍니다.","android-studio--plugins--dart--flutter-설치#Android Studio → Plugins → Dart , Flutter 설치":"Dart 설치\nFlutter 설치","샘플-프로젝트-clone--download#샘플 프로젝트 Clone / Download":"샘플 프로젝트는 준비해서 따로 올릴 예정입니다.","project-sdk-설정#Project SDK 설정":"Ctrl + , 또는 Cmd + , 를 눌러서 Settings 화면으로 진입합니다. 그리고 Languages & Frameworks 메뉴 내의 Flutter 메뉴로 진입합니다.그리고 Flutter SDK Path 에는 압축을 풀었던 flutter 디렉터리를 지정해줍니다. 여기서 주의할 점은 OS의 환경변수로 등록할때 bin 을 등록했었지만, Android Studio 의 설정에서의 SDK Path 는 Flutter SDK 디렉터리 자체를 등록해줘야 한다는 점입니다.모두 완료되었다면 OK 버튼을 클릭해주세요.이렇게 설정하고 나면 Dart 언어의 SDK 도 자동으로 세팅됩니다.","의존성-다운로드#의존성 다운로드":"Flutter 의 경우 flutter pub get 명령어로 의존성을 다운로드 받아줘야 합니다. 그런데 Android Studio 내에서는 flutter pub get 명령이 이미 구비되어 있으며 GUI에서 버튼을 누르는 것으로 update 가 가능해집니다.위의 pubspec.yaml 파일에서 Pub get 버튼을 클릭해서 나머지 의존성들을 모두 다운로드 받아서 설치해주시면 됩니다."}},"/step1-basic/1.hello":{"title":"1.hello","data":{"helloworld-프로젝트#Helloworld 프로젝트":"","project-개설#Project 개설":"","project-view-로-전환#Project View 로 전환":"","start#Start":"lib/main.dart 와 test/widget_test.dart 파일을 모두 열어서 파일 내부의 내용들을 모두 지워줍니다. lib/main.dart , test/widget_test.dart 파일들은 모두 아래의 위치에 있습니다.\nlib/main.dart 와 test/widget_test.dart 파일의 내부를 모두 지워주세요.\n이번에는 아래의 코드를 작성합니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n\r\n    ),\r\n  ));\r\n}\nrunApp() 함수\nrunApp 함수 내에 MaterialApp 말고도 Cupertino 등 여러가지를 사용할 수 있습니다.\nMaterialApp\n앱의 가장 기본이 되는 단위. 최상위에 위치\n이번 예제에서는 material.dart 내의 runApp() 함수를 사용하기에 MaterialApp 객체를 사용합니다.\nScaffold\nMaterialApp 에서 화면을 구성할 때 가장 기본이 되는 도화지같은 개념입니다.\nrunApp() 함수는 MaterialApp 객체를 입력으로 받는 함수를 선택하시기 바랍니다.\n이제 위의 코드를 구동시키면 아래와 같은 화면이 나타납니다. 이번 예제에서는 별도의 Device Manager 를 선택하지 않았기 때문에 웹에서 그 내용이 나타납니다.\n디버그 모드에서 띄웠기에 Debug 라는 표시가 나타납니다.이번에는 아래와 같이 body: Text(...) 을 추가해줍니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: Text('Hello, Flutter', style: TextStyle(\r\n        color: Colors.blue,\r\n      ),),\r\n    ),\r\n  ));\r\n}\n위의 코드에서 Ctrl + Alt + L 또는 Cmd + Alt + L 을 누르면 아래와 같이 들여쓰기가 됩니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: Text(\r\n        'Hello, Flutter',\r\n        style: TextStyle(\r\n          color: Colors.blue,\r\n        ),\r\n      ),\r\n    ),\r\n  ));\r\n}\n별도로 Run 버튼을 새로 누르지 않더라도 새로고침이 되며, 출력결과는 아래와 같습니다.\n이번에는 위젯을 추가해봅니다. 방금전 추가했던 Text 컴포넌트 위에 Alt + Enter 키를 누르면 여러가지 선택지가 나타나는데 이 중에서 Wrap with widget ... 을 선택해줍니다.\n그리고 SafeArea 를 선택해줍니다.\n완성된 코드는 아래와 같습니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: SafeArea(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    ),\r\n  ));\r\n}","코드-분리#코드 분리":"이번에는 코드를 분리해봅니다. 에디터 하단의 공백에 stless 를 입력하면 Stateless Widget 의 기본 코드가 Live Template 을 통해서 나타납니다.\n그리고 만들어진 Stateless Widget 에는 build 함수 내에 방금전 작성했던 SafeArea 코드를 리턴하도록 작성해줍니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: SafeArea(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Text(\r\n        'Hello, Flutter',\r\n        style: TextStyle(\r\n          color: Colors.blue,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\n그리고 HelloworldWidget 을 main() 에서 사용하도록 아래와 같이 수정해줍니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      /// (1) : 이 부분을 수정해줬습니다.\r\n      body: HelloworldWidget(),\r\n    ),\r\n  ));\r\n}\r\n\r\n// (2)\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Text(\r\n        'Hello, Flutter',\r\n        style: TextStyle(\r\n          color: Colors.blue,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\n(1) : 원래 있던 코드 들을 (2) 에서 작성한 클래스 내의 build() 메서드 안으로 옮겨주었고, (2) 에서 작성한 위젯을 불러오도록 작성했습니다.","text-위젯을-center-위젯으로-한번-더-감싸기#Text 위젯을 Center 위젯으로 한번 더 감싸기":"Text 의 위치를 정 중앙에 위치하도록 해봅니다.위에서 작성한 HelloworldWidget 에 Alt + Enter 키를 누르면 추천이 나타나는데 그 중 Wrap With Center 를 선택해줍니다.\n그러면 코드가 아래와 같이 잘 적용됩니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      body: HelloworldWidget(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Center(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\n변경된 화면은 아래와 같습니다.","hot-reload-와-hot-restart#Hot Reload 와 Hot Restart":"Hot Reload, Hot Restart 모두 앱을 Re Compile 한 후 빌드하는 것이 아닙니다. 따라서 dependency 를 추가했다거나, 라이브러리 수정, Asset 추가 등과 같은 상황에는 적용되지 않습니다. 따라서 이런 경우에는 재시작해야 합니다.\n만약 지나치게 많은 코드의 변경사항을 했을 경우 Reload → Restart 하는 순서로 실행중인 프로세스가 상위 재시동을 요청할 수도 있고, 상태관리를 하는 기능일 때에는 Hot Reload, Hot Restart 기능의 사용은 가급적 주의가 필요합니다.Hot Reload, Hot Restart 기능은 Dart 의 JIT 컴파일러를 이용해 앱의 컴파일 과정 없이 코드의 변경사항을 즉시 반영하는 기능입니다. 참고로 Dart 언어는 JIT 컴파일러를 이용해서 프로그램의 실행 중에 컴파일을 할 수도 있고, AOT 컴파일러를 이용해서 전체 코드를 컴파일 한 후에 실행할 수도 있습니다. 주로 JIT 컴파일러는 개발 중에 사용되며, AOT 컴파일러는 실재 배포될 애플리케이션을 실행하는 데에 사용됩니다.","hot-reload#Hot Reload":"Hot Reload 버튼은 위와 같은 아이콘이 적용된 버튼입니다. Hot Reload 버튼을 누르면 Ctrl + S 로 소스코드의 변경사항을 저장될 때마다 변경된 부분이 적용됩니다.앱의 상태가 유지된 상태로 코드의 변경사항을 확인하면서 빠르게 개발을 수행할 수 있습니다. 주로 UI 수정에 많이 사용합니다.","hot-restart#Hot Restart":"Hot Restart 버튼은 위와 같은 아이콘이 적용된 버튼입니다. Hot Restart 버튼을 누르면 Ctrl + S 로 소스코드의 변경사항을 저장할 때마다 Restart 됩니다. 앱의 모든 상태가 초기화되고, 앱의 코드 변경사항이 반영됩니다."}},"/step1-basic/3.widgets":{"title":"3.widgets","data":{"":"MatiralApp, Scaffold widget\nContainer, Center widget","materialapp-widget#MaterialApp Widget":"참고 : api.flutter.dev - MaterialApp class\napi.flutter.dev - MaterialApp class 에서는 MaterialApp 내의 인자값에 대해서 아래와 같이 설명하고 있습니다.The MaterialApp configures the top-level Navigator to search for routes in the following order:\nFor the / route, the home property, if non-null, is used.\nOtherwise, the routes table is used, if it has an entry for the route.\nOtherwise, onGenerateRoute is called, if provided. It should return a non-null value for any valid route not handled by home and routes.\nFinally if all else fails onUnknownRoute is called.\n이 외에도 Properties 섹션을 보면 다양한 인자값에 대해 설명하고 있습니다.home\n앱을 제일 처음 실행했을 때 진입하는 기본 route 를 home 이라고 이야기합니다.\nroutes\n앱 내에서 화면이 이동될 때 이동될 경로를 route 라고 이야기합니다.\ncolor, theme\ncolor 또는 theme 을 지정해줄 수 있습니다.\n일반적으로 theme 객체를 지정해서 통일성을 부여합니다.","scaffold-widget#Scaffold Widget":"Scaffold 는 앱을 구성할 때 쓰이는 도화지(캔버스) 같은 존재입니다. e.g.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n          actions: [\r\n            IconButton(\r\n                onPressed: () {\r\n                  print(\"Pressed!!\");\r\n                },\r\n                icon: Icon(Icons.play_arrow))\r\n          ],\r\n          title: Center(\r\n            child: Text('Helloworld App Bar'),\r\n          )),\r\n      body: HelloworldWidget(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass HelloworldWidget extends StatelessWidget {\r\n  const HelloworldWidget({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: Center(\r\n        child: Text(\r\n          'Hello, Flutter',\r\n          style: TextStyle(\r\n            color: Colors.blue,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\nScaffold 내에 appBar, body 를 추가해줬습니다.위의 실행 결과는 아래와 같습니다.Scaffold 위젯은 위의 그림에서 빨간 테두리에 표시한 영역에 해당합니다. 마치 캔버스 같은 영역입니다.이번에는 우측 상단의 재생버튼을 눌러보시기 바랍니다.\n그러면 아래와 같은 문구들이 콘솔에 나타납니다.","container-widget#Container Widget":"먼저 아래의 dart 코드를 작성해주세요.container_example.dart\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Study Container'),\r\n      ),\r\n      body: CustomContainer(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 300,\r\n      height: 300,\r\n      color: Colors.amber,\r\n      child: Text('Container 영역'),\r\n    );\r\n  }\r\n}\n이렇게 작성한 코드의 결과물을 돌려보면 아래와 같은 결과가 나타납니다. 300x300 사이즈의 컨테이너가 생성되었습니다.\n이번에는 컨테이너의 가로, 세로를 모두 채워보겠습니다. 아래의 코드로 수정해주세요.Container 위젯의 width, height 을 모두 double.infinity 로 지정해주었습니다.container_example.dart\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Study Container'),\r\n      ),\r\n      body: CustomContainer(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: double.infinity, // 변경\r\n      height: double.infinity, // 변경\r\n      color: Colors.amber,\r\n      child: Text('Container 영역'),\r\n    );\r\n  }\r\n}\n출력결과는 아래와 같습니다.\n이번에는 배경을 조금 투명하게 만들어봅니다. color 항목에 대해 Colors.amber.shade200 으로 지정해줬습니다.container_example.dart\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Study Container'),\r\n      ),\r\n      body: CustomContainer(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: double.infinity,\r\n      height: double.infinity,\r\n      color: Colors.amber.shade200, // 변경한 부분\r\n      child: Text('Container 영역'),\r\n    );\r\n  }\r\n}\n출력결과는 아래와 같습니다.\n이번에는 색상을 직접 지정해줘보겠습니다.에디터의 왼쪽에 보이는 색상 아이콘을 클릭하면 팝업이 나타나는데, 원하는 색상을 포인터로 선택 후에 Hex 값을 복사합니다.색상 코드를 복사한 후 아래와 같이 코드를 수정해주세요.container_example.dart\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Study Container'),\r\n      ),\r\n      body: CustomContainer(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: double.infinity,\r\n      height: double.infinity,\r\n      color: Color(0xFF9AEC67), // 여기를 수정했습니다.\r\n      child: Text('Container 영역'),\r\n    );\r\n  }\r\n}\n색상 팔레트에서 복사한 값은 9AEC67FF 였습니다. 여기에서 아래와 같이 변경해서 적용했습니다.\n맨 앞에 0x 를 붙입니다 : 0x9AEC67FF\n맨 뒤의 FF 를 제거합니다 : 0x9AEC67\n0x 의 바로 뒤에 FF 를 붙여줍니다 : 0xFF9AEC67\n색상 코드의 각 자리수는 아래와 같은 의미를 가집니다.\n0x[투명도 2자리][Red 표현 2자리][Green 표현 2자리][Blue 표현 2자리]\n위의 코드는 아래와 같이 출력됩니다.\n이번에는 padding, margin 을 지정해봅니다.container_example.dart\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Study Container'),\r\n      ),\r\n      body: CustomContainer(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: double.infinity,\r\n      height: double.infinity,\r\n      color: Color(0xFF9AEC67),\r\n      padding: EdgeInsets.fromLTRB(30, 50, 30, 5),\r\n      child: Text('Container 영역'),\r\n    );\r\n  }\r\n}\n왼쪽에서 30px, 위에서 50px 의 빈 공간의 간격(padding)을 두고 child 를 배치하게 됩니다. 이 외에도 right, bottom 을 지정했는데, 내용물의 길이가 길지 않기에 넘쳐나지 않게 되어서 이번 출력물에서는 확인은 불가능하지만, right, bottom 에도 padding 을 각각 지정해둔 상태입니다.\n이번에는 margin 을 수정하는 코드를 작성해봅니다.먼저 테스트를 위해 아래와 같이 Container 영역을 줄여주는 코드를 작성합니다.container_example.dart\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Study Container'),\r\n      ),\r\n      body: CustomContainer(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 300,\r\n      height: 300,\r\n      color: Color(0xFF9AEC67),\r\n      padding: EdgeInsets.fromLTRB(30, 50, 30, 5),\r\n      child: Text('Container 영역'),\r\n    );\r\n  }\r\n}\n출력결과는 아래와 같습니다.\n이제 위에 나타난 초록색 영역을 Scaffold 내에서 약간의 간격을 두고 떨어지도록 설정하는 코드를 작성해봅니다. 코드는 아래와 같습니다.container_example.dart\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Study Container'),\r\n      ),\r\n      body: CustomContainer(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 300,\r\n      height: 300,\r\n      color: Color(0xFF9AEC67),\r\n      padding: EdgeInsets.fromLTRB(30, 50, 30, 5),\r\n      margin: EdgeInsets.symmetric(vertical: 120, horizontal: 50),\r\n      child: Text('Container 영역'),\r\n    );\r\n  }\r\n}\nvertical :120\n수직(상하) 간격으로 120 의 공간을 배치해서 떨어뜨려 줍니다.\nhorizontal : 50\n수평 (좌우) 간격으로 50 의 공간을 배치해서 떨어뜨려 줍니다.\n변경된 결과물은 아래와 같습니다.","decoration-widget#Decoration Widget":"이번에는 BoxDecoration 을 이용해서 경계선과 배경색을 지정해봅니다.border_example.dart\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Study Container'),\r\n      ),\r\n      body: CustomContainer(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 300,\r\n      height: 300,\r\n      // color: Color(0xFF9AEC67), // decoration 과 color 는 같이 쓰는 것이 불가능\r\n      padding: EdgeInsets.fromLTRB(30, 50, 30, 5),\r\n      margin: EdgeInsets.symmetric(vertical: 120, horizontal: 50),\r\n      decoration: BoxDecoration(\r\n          color: Color(0xFF9AEC67),\r\n          border: Border.all(\r\n              color: Colors.black, width: 5, style: BorderStyle.solid),\r\n          borderRadius: BorderRadius.circular(20)),\r\n      child: Text('Container 영역'),\r\n    );\r\n  }\r\n}\n이 코드의 출력결과는 아래와 같습니다.\nborderRadius값을 200 으로 지정하면 모서리가 더 둥글고 뭉뚝해집니다.코드를 아래와 같이 수정해줍니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Study Container'),\r\n      ),\r\n      body: CustomContainer(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 300,\r\n      height: 300,\r\n      // color: Color(0xFF9AEC67), // decoration 과 color 는 같이 쓰는 것이 불가능\r\n      padding: EdgeInsets.fromLTRB(30, 50, 30, 5),\r\n      margin: EdgeInsets.symmetric(vertical: 120, horizontal: 50),\r\n      decoration: BoxDecoration(\r\n          color: Color(0xFF9AEC67),\r\n          border: Border.all(\r\n              color: Colors.black, width: 5, style: BorderStyle.solid),\r\n          borderRadius: BorderRadius.circular(200)),\r\n      child: Text('Container 영역'),\r\n    );\r\n  }\r\n}\n출력결과는 아래와 같이 변합니다.\n이번에는 그림자효과를 주어봅니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Study Container'),\r\n      ),\r\n      body: CustomContainer(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 300,\r\n      height: 300,\r\n      // color: Color(0xFF9AEC67), // decoration 과 color 는 같이 쓰는 것이 불가능\r\n      padding: EdgeInsets.fromLTRB(30, 50, 30, 5),\r\n      margin: EdgeInsets.symmetric(vertical: 120, horizontal: 50),\r\n      decoration: BoxDecoration(\r\n          color: Color(0xFF9AEC67),\r\n          border: Border.all(\r\n              color: Colors.black, width: 5, style: BorderStyle.solid),\r\n          borderRadius: BorderRadius.circular(200),\r\n          // (1) 변경된 부분\r\n          boxShadow: [\r\n            BoxShadow(\r\n                color: Colors.blue.withOpacity(0.6),\r\n                offset: Offset(6, 6),\r\n                blurRadius: 10,\r\n                spreadRadius: 10)\r\n          ]),\r\n      child: Text('Container 영역'),\r\n    );\r\n  }\r\n}\n위 코드에서 변경된 부분은 (1) 의 영역입니다. boxShadow 속성에 대해서 BoxShadow 객체를 지정해줬습니다. 그림자의 색깔을 따로 지정해주면서 withOpacity(투명도) 를 통해서 투명하게 지정해줬습니다. 색깔을 지정하지 않으면 그림자는 기본적으로 검은색 색상으로 지정됩니다.","center-widget#Center Widget":"Center widget 은 위젯을 가운데로 배치하는 위젯입니다.아래와 같은 코드가 있다고 해보겠습니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Study Center Widget'),\r\n      ),\r\n      body: CustomContainer(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 190,\r\n      height: 190,\r\n      color: Color(0xFF9AEC67),\r\n      padding: EdgeInsets.fromLTRB(30, 50, 30, 5),\r\n      margin: EdgeInsets.symmetric(vertical: 120, horizontal: 50),\r\n      child: Text('Container 영역'),\r\n    );\r\n  }\r\n}\n이 코드는 아래와 같이 출력됩니다.\n이 위젯을 가운데로 위치시키려면 수동으로 사이즈를 계산해서 margin 을 지정할 수도 있겠지만, Center 위젯을 사용하면 가운데로 위치시키는 것이 가능합니다.Container 를 가운데로 위치시키기를 원하기 때문에 Container 위젯 위에 마우스 커서를 올려 둔 후 Alt + Enter 키를 누른 후 Center 위젯을 선택합니다.\n이렇게 적용된 코드는 아래와 같습니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main(){\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Study Center Widget'),\r\n      ),\r\n      body: CustomContainer(),\r\n    ),\r\n  ));\r\n}\r\n\r\nclass CustomContainer extends StatelessWidget {\r\n  const CustomContainer({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Center(\r\n      child: Container(\r\n        width: 190,\r\n        height: 190,\r\n        color: Color(0xFF9AEC67),\r\n        padding: EdgeInsets.fromLTRB(30, 50, 30, 5),\r\n        margin: EdgeInsets.symmetric(vertical: 120, horizontal: 50),\r\n        child: Text('Container 영역'),\r\n      ),\r\n    );\r\n  }\r\n}\nContainer 위젯이 가운데로 이동한 것을 확인가능합니다."}},"/step1-basic/4.column-row":{"title":"4.column Row","data":{"참고#참고":"flutter: Widget(Column & Row)","column-row#Column, Row":"Column\n위젯을 위/아래로 쌓을 때는 Column 을 사용합니다.\nColumn 역시 위젯입니다.\nColumn 은 기본적으로 위에 붙어 있는 상태로 생성됩니다.\nColumn 을 가운데로 배치하기 위해서 Center 위젯으로 감싸려는 경우가 있는데 Center 위젯으로 감싸도 가운데에 위치하지는 않습니다.\nColumn 을 가운데로 배치하기 위해서는 Column 위젯 내의 mainAxisAlignment 에 MainAxisAlignment.center 를 부여합니다. 아래에서 설명합니다.\nRow\n위젯을 좌/우로 펼칠때 Row 를 사용합니다.\nRow 를 가운데에 위치시키기 위해서는 Container 로 감싼 후에 Container 의 height : double.infinity 로 주면 됩니다. Row 는 자기 자신이 위치한 곳의 정중앙에 위치하려고 하는 속성이 있기 때문입니다.","column-으로-위젯을-상하로-쌓아보기#Column 으로 위젯을 상하로 쌓아보기":"아래 예제에서는 Body 컴포넌트를 StatelessWidget 으로 구성했으며, 내부의 배치를 Column 으로 배치되게끔 했습니다.\r\nlib/layout_example1.dart\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n        appBar: AppBar(\r\n          title: Text('widget 을 상하로 배치하기'),\r\n        ),\r\n        body: Body()),\r\n  ));\r\n}\r\n\r\nclass Body extends StatelessWidget {\r\n  const Body({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // 위젯을 위/아래로 쌓을 때는 Column 이라는 위젯을 사용\r\n    return Column(\r\n      // (1)\r\n      children: [\r\n        Container(\r\n          width: 100,\r\n          height: 80,\r\n          child: Text('Container 1'),\r\n          color: Colors.red,\r\n        ),\r\n        Container(\r\n          width: 100,\r\n          height: 80,\r\n          child: Text('Container 2'),\r\n          color: Colors.green,\r\n        ),\r\n        Container(\r\n          width: 100,\r\n          height: 80,\r\n          child: Text('Container 3'),\r\n          color: Colors.blue,\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\n(1) : children 에 컨테이너 위젯들을 여러개 두었습니다.\n이 코드의 결과는 아래와 같습니다.","참고--child-필드를-가장-뒤로-배치#참고 : child 필드를 가장 뒤로 배치":"Move child property to end of arguments\n현재 선택한 필드 내의 child 프로퍼티를 가장 뒤로 옮깁니다.\nMove child properties to ends of arguments everywhere in file\n뒤에 따라오는 다른 Container 들에도 똑같이 child 프로퍼티가 뒤에 위치하도록 해줍니다.","column-을-container-로-감싸기-1#Column 을 Container 로 감싸기 (1)":"Column 은 위젯입니다. Container 라는 위젯으로 감싸는 것 역시 가능합니다.\r\n그리고 아래의 코드를 작성해주세요.\r\nlib/layout_example.dart\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n        appBar: AppBar(\r\n          title: Text('widget 을 상하로 배치하기'),\r\n        ),\r\n        body: Body()),\r\n  ));\r\n}\r\n\r\nclass Body extends StatelessWidget {\r\n  const Body({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // 위젯을 위/아래로 쌓을 때는 Column 이라는 위젯을 사용\r\n    return Container(\r\n      height: double.infinity, // (1)\r\n      width: double.infinity,  // (1)\r\n      color: Colors.amber,  // (2)\r\n      child: Column(\r\n        children: [\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 1'),\r\n            color: Colors.red,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 2'),\r\n            color: Colors.green,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 3'),\r\n            color: Colors.blue,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\n(1) : width, height 를 꽉 차게 지정해줬습니다.\n(2) : Container 의 색을 Colors.amber 로 지정해줬습니다.\n위 코드의 결과는 아래와 같습니다.","column-을-가운데로-옮겨보기#Column 을 가운데로 옮겨보기":"Column 을 가운데로 배치하기 위해서는 Column 위젯 내의 mainAxisAlignment 에 MainAxisAlignment.center 를 부여합니다.\r\n아래 코드를 작성해봅니다.\r\nlib/layout_example3.dart\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n        appBar: AppBar(\r\n          title: Text('widget 을 상하로 배치하기'),\r\n        ),\r\n        body: Body()),\r\n  ));\r\n}\r\n\r\nclass Body extends StatelessWidget {\r\n  const Body({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // 위젯을 위/아래로 쌓을 때는 Column 이라는 위젯을 사용\r\n    return Container(\r\n      height: double.infinity,\r\n      width: double.infinity,\r\n      color: Colors.amber,\r\n      child: Column(\r\n        // (1) \r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: [\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 1'),\r\n            color: Colors.red,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 2'),\r\n            color: Colors.green,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 3'),\r\n            color: Colors.blue,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\n(1)\nColumn 을 가운데로 배치하기 위해서는 Column 위젯 내의 mainAxisAlignment 에 MainAxisAlignment.center 를 부여했습니다.\n위 코드의 출력결과는 아래와 같습니다.","column-을-왼쪽으로-붙이기#Column 을 왼쪽으로 붙이기":"이번에는 Column 의 사이즈를 작게해서 세로 사이즈가 작은 Column 을 구성하고, 이 Column 을 왼쪽에 붙여봅니다.코드는 아래와 같습니다.\r\nlib/layout_example4.dart\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n        appBar: AppBar(\r\n          title: Text('widget 을 상하로 배치하기'),\r\n        ),\r\n        body: Body()),\r\n  ));\r\n}\r\n\r\nclass Body extends StatelessWidget {\r\n  const Body({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // 위젯을 위/아래로 쌓을 때는 Column 이라는 위젯을 사용\r\n    return Container(\r\n      height: double.infinity,\r\n      width: double.infinity,\r\n      color: Colors.amber,\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        // (1) \r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: [\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 1'),\r\n            color: Colors.red,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 2'),\r\n            color: Colors.green,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 3'),\r\n            color: Colors.blue,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\n(1)\ncrossAxisAlignment: CrossAxisAlignment.start 을 추가해서 왼쪽 끝으로 붙게해줬습니다.","column-사이즈를-작게-만들어보기#Column 사이즈를 작게 만들어보기":"이번에는 Column 의 사이즈를 작게해서 세로 사이즈가 작은 Column 을 구성하고, 이 Column 을 왼쪽에 붙여봅니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n        appBar: AppBar(\r\n          title: Text('widget 을 상하로 배치하기'),\r\n        ),\r\n        body: Body()),\r\n  ));\r\n}\r\n\r\nclass Body extends StatelessWidget {\r\n  const Body({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // 위젯을 위/아래로 쌓을 때는 Column 이라는 위젯을 사용\r\n    return Container(\r\n      // (1)\r\n      height: 400,\r\n      width: double.infinity,\r\n      color: Colors.amber,\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        crossAxisAlignment: CrossAxisAlignment.start,\r\n        children: [\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 1'),\r\n            color: Colors.red,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 2'),\r\n            color: Colors.green,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 3'),\r\n            color: Colors.blue,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\n(1)\nContainer 의 height 를 400 으로 지정해줍니다.\n출력결과는 아래와 같습니다.\r\n만약 오른쪽 끝으로 붙이려면 CrossAxisAlignment.end 를 사용합니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n        appBar: AppBar(\r\n          title: Text('widget 을 상하로 배치하기'),\r\n        ),\r\n        body: Body()),\r\n  ));\r\n}\r\n\r\nclass Body extends StatelessWidget {\r\n  const Body({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // 위젯을 위/아래로 쌓을 때는 Column 이라는 위젯을 사용\r\n    return Container(\r\n      height: 400,\r\n      width: double.infinity,\r\n      color: Colors.amber,\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        crossAxisAlignment: CrossAxisAlignment.end,\r\n        children: [\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 1'),\r\n            color: Colors.red,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 2'),\r\n            color: Colors.green,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 3'),\r\n            color: Colors.blue,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\n출력결과는 아래와 같습니다.\r\n만약 컬럼의 사이즈를 3개의 컨테이너를 쌓아둔 폭 만큼으로 제한하고 싶다면 minAxisSize : MainAxisSize.min 을 부여해줍니다.\r\n코드는 아래와 같습니다.\n출력결과는 아래와 같습니다.","row--좌우-배치#Row : 좌우 배치":"import 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n        appBar: AppBar(\r\n          title: Text('widget 을 상하로 배치하기'),\r\n        ),\r\n        body: Body()),\r\n  ));\r\n}\r\n\r\nclass Body extends StatelessWidget {\r\n  const Body({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // 위젯을 위/아래로 쌓을 때는 Column 이라는 위젯을 사용\r\n    return Container(\r\n      width: double.infinity,\r\n      color: Colors.amber,\r\n      // (1)\r\n      child: Row(\r\n        children: [\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 1'),\r\n            color: Colors.red,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 2'),\r\n            color: Colors.green,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 3'),\r\n            color: Colors.blue,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\n(1)\nColumn 으로 사용하던 컴포넌트를 Row 로 바꿔줌\n위 코드의 결과는 아래와 같습니다.\r\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n        appBar: AppBar(\r\n          title: Text('widget 을 상하로 배치하기'),\r\n        ),\r\n        body: Body()),\r\n  ));\r\n}\r\n\r\nclass Body extends StatelessWidget {\r\n  const Body({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // 위젯을 위/아래로 쌓을 때는 Column 이라는 위젯을 사용\r\n    return Container(\r\n      width: double.infinity,\r\n      color: Colors.amber,\r\n      child: Row(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        children: [\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 1'),\r\n            color: Colors.red,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 2'),\r\n            color: Colors.green,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 3'),\r\n            color: Colors.blue,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\n위의 코드에서처럼\r\nmainAxisAlignment: MainAxisAlignment.center, 을 주면 아래와 같이 가운데로 배치됩니다.아래 코드 처럼\r\ncrossAxisAlignment: CrossAxisAlignment.center, 을 주면 세로 위치 상으로 가운데에 위치할 것 같지만 그렇지 않습니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n        appBar: AppBar(\r\n          title: Text('widget 을 상하로 배치하기'),\r\n        ),\r\n        body: Body()),\r\n  ));\r\n}\r\n\r\nclass Body extends StatelessWidget {\r\n  const Body({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // 위젯을 위/아래로 쌓을 때는 Column 이라는 위젯을 사용\r\n    return Container(\r\n      width: double.infinity,\r\n      color: Colors.amber,\r\n      child: Row(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        crossAxisAlignment: CrossAxisAlignment.center,\r\n        children: [\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 1'),\r\n            color: Colors.red,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 2'),\r\n            color: Colors.green,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 3'),\r\n            color: Colors.blue,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\n위 코드의 출력 결과는 아래와 같습니다.","row-를-세로-정중앙에-배치#Row 를 세로 정중앙에 배치":"Row 를 가운데에 위치시키기 위해서는 Container 로 감싼 후에 Container 의 height : double.infinity 로 주면 됩니다. Row 는 자기 자신이 위치한 곳의 정중앙에 위치하려고 하는 속성이 있기 때문입니다.\nimport 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(MaterialApp(\r\n    home: Scaffold(\r\n        appBar: AppBar(\r\n          title: Text('widget 을 상하로 배치하기'),\r\n        ),\r\n        body: Body()),\r\n  ));\r\n}\r\n\r\nclass Body extends StatelessWidget {\r\n  const Body({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // 위젯을 위/아래로 쌓을 때는 Column 이라는 위젯을 사용\r\n    return Container(\r\n      height: double.infinity,\r\n      color: Colors.amber,\r\n      child: Row(\r\n        mainAxisAlignment: MainAxisAlignment.center,\r\n        crossAxisAlignment: CrossAxisAlignment.center,\r\n        children: [\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 1'),\r\n            color: Colors.red,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 2'),\r\n            color: Colors.green,\r\n          ),\r\n          Container(\r\n            width: 100,\r\n            height: 80,\r\n            child: Text('Container 3'),\r\n            color: Colors.blue,\r\n          ),\r\n        ],\r\n      ),\r\n    );\r\n  }\r\n}\n9:21 이후 스킵. 더 들어봐야 특이할 내용이 없어서 스킵"}},"/step1-basic/5.pub.dev":{"title":"5.pub.dev","data":{"pubdev#pub.dev":"라이브러리를 저장하고 있는 저장소를 리포지터리라고 부르는데, 일반적으로 안드로이드 또는 maven, gradle 등은 maven 리포지터리를 사용하고, 애플의 경우에는 cocoapods 리포지터리를 사용한다.","flutter-library-repository#flutter library repository":"flutter 에서는 https://pub.dev 가 리포지터리다.flutter 에서는 library 라는 단어 대신 package 라는 단어를 사용한다.따라서 flutter package repository 라고도 부른다.pub.dev 라고 불리는 pub 리포지터리에서는 dart 패키지, flutter 패키지 두가지 가 존재한다.\ndart 패키지는 dart 프로젝트, flutter 프로젝트 모두에서 사용 가능하다.\nflutter 패키지는 flutter 프로젝트 내에서만 사용 가능하다.\nflutter 는 dart 언어로 구현된 프레임워크이고, dart 는 언어이다.dart 는 2011 년도에 만들어졌고, pub 는 2012 년도에 생겼다. 그리고 Flutter 는 2014 년에 만들어져서 2017 년도에 Release 되었다.재미있게도 pub.dev 에 최초로 출시된 패키지는 js 라고 한다. dart 언어가 탄생한 목적이 처음에는 웹 프레임워크를 위해서 였다고 한다. 이런 이유로 js 변환 지원이 최 우선 목표였다고 함."}},"/":{"title":"Introduction","data":{"":"1인 스타트업 창업이 목표여서 백엔드 개발자임에도 스터디 중이에요\nFlutter Study Log\nexample : https://github.com/chagchagchag/example-flutter-study"}}}